on: [push, pull_request]

jobs:
  runTest:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Install Arduino CLI
      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sudo sh
          export PATH=$PATH:/home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin
          echo "Arduino CLI version:"
          /home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin/arduino-cli version  # Check the version to confirm installation

      # Step 3: Verify Arduino CLI installation
      - name: Verify Arduino CLI installation
        run: |
          echo "Listing files in bin directory:"
          ls -l /home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin  # Check if arduino-cli is available

      # Step 4: Install necessary cores
      - name: Install Arduino cores
        run: |
          /home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin/arduino-cli core update-index
          /home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin/arduino-cli core install arduino:avr
          /home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin/arduino-cli core install arduino:sam
          /home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin/arduino-cli core install esp8266:esp8266  # Add esp8266 core

      # Debugging Step 1: Check installed cores
      - name: List installed cores
        run: |
          /home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin/arduino-cli core list

      # Debugging Step 2: Check OneWire library installation
      - name: Check OneWire library installation
        run: |
          /home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin/arduino-cli lib list | grep OneWire

      # Step 5: Install Ruby and Arduino CI
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6

      - name: Install Arduino CI
        run: |
          gem install arduino_ci -v 1.5.0

      # Step 6: Run Arduino CI Tests
      - name: Run Arduino CI Tests
        run: |
          /home/runner/work/Arduino-Temperature-Control-Library/Arduino-Temperature-Control-Library/bin/arduino_ci.rb

      # Debugging Step 3: Check the working directory and Arduino config
      - name: Check working directory and Arduino config
        run: |
          echo "Working directory: $(pwd)"
          cat .arduino-ci.yml  # Ensure the configuration file is correct
